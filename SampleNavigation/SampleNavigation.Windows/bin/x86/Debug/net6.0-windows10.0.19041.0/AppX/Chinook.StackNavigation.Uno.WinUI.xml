<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Chinook.StackNavigation.Uno.WinUI</name>
    </assembly>
    <members>
        <member name="M:Microsoft.UI.Dispatching.DispatcherQueueExtensions.ConvertToDispatcherQueuePriority(Windows.UI.Core.CoreDispatcherPriority)">
            <summary>
            Convert <see cref="T:Windows.UI.Core.CoreDispatcherPriority"/> to <see cref="T:Microsoft.UI.Dispatching.DispatcherQueuePriority"/>
            </summary>
        </member>
        <member name="M:Microsoft.UI.Dispatching.DispatcherQueueExtensions.RunAsync(Microsoft.UI.Dispatching.DispatcherQueue,Windows.UI.Core.CoreDispatcherPriority,Microsoft.UI.Dispatching.DispatcherQueueHandler)">
            <summary>
            Invokes a given function on the target <see cref="T:Microsoft.UI.Dispatching.DispatcherQueue"/> and returns a
            <see cref="T:System.Threading.Tasks.Task"/> that completes when the invocation of the function is completed.
            </summary>
            <param name="dispatcher">The target <see cref="T:Microsoft.UI.Dispatching.DispatcherQueue"/> to invoke the code on.</param>
            <param name="handler">The <see cref="T:Microsoft.UI.Dispatching.DispatcherQueueHandler"/> to invoke.</param>
            <param name="priority">The priority level for the function to invoke.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the invocation of <paramref name="handler"/> is over.</returns>
            <remarks>If the current thread has access to <paramref name="dispatcher"/>, <paramref name="handler"/> will be invoked directly.</remarks>
        </member>
        <member name="M:Microsoft.UI.Dispatching.DispatcherQueueExtensions.RunTaskAsync(Microsoft.UI.Dispatching.DispatcherQueue,Windows.UI.Core.CoreDispatcherPriority,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Invokes a given function on the target <see cref="T:Microsoft.UI.Dispatching.DispatcherQueue"/> and returns a
            <see cref="T:System.Threading.Tasks.Task"/> that completes when the invocation of the function is completed.
            </summary>
            <param name="dispatcher">The target <see cref="T:Microsoft.UI.Dispatching.DispatcherQueue"/> to invoke the code on.</param>
            <param name="asyncAction">The <see cref="T:Microsoft.UI.Dispatching.DispatcherQueueHandler"/> to invoke.</param>
            <param name="priority">The priority level for the function to invoke.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the invocation of <paramref name="asyncAction"/> is over.</returns>
            <remarks>If the current thread has access to <paramref name="dispatcher"/>, <paramref name="asyncAction"/> will be invoked directly.</remarks>
        </member>
        <member name="M:Microsoft.UI.Dispatching.DispatcherQueueExtensions.RunTaskAsync``1(Microsoft.UI.Dispatching.DispatcherQueue,Windows.UI.Core.CoreDispatcherPriority,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Invokes a given function on the target <see cref="T:Microsoft.UI.Dispatching.DispatcherQueue"/> and returns a
            <see cref="T:System.Threading.Tasks.Task"/> that completes when the invocation of the function is completed.
            </summary>
            <param name="dispatcher">The target <see cref="T:Microsoft.UI.Dispatching.DispatcherQueue"/> to invoke the code on.</param>
            <param name="asyncAction">The <see cref="T:Microsoft.UI.Dispatching.DispatcherQueueHandler"/> to invoke.</param>
            <param name="priority">The priority level for the function to invoke.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the invocation of <paramref name="asyncAction"/> is over.</returns>
            <remarks>If the current thread has access to <paramref name="dispatcher"/>, <paramref name="asyncAction"/> will be invoked directly.</remarks>
        </member>
        <member name="M:Microsoft.UI.Dispatching.DispatcherQueueExtensions.EnqueueAsync(Microsoft.UI.Dispatching.DispatcherQueue,System.Func{System.Threading.Tasks.Task},Microsoft.UI.Dispatching.DispatcherQueuePriority)">
            <summary>
            Invokes a given function on the target <see cref="T:Microsoft.UI.Dispatching.DispatcherQueue"/> and returns a
            <see cref="T:System.Threading.Tasks.Task"/> that acts as a proxy for the one returned by the given function.
            </summary>
            <param name="dispatcher">The target <see cref="T:Microsoft.UI.Dispatching.DispatcherQueue"/> to invoke the code on.</param>
            <param name="function">The <see cref="T:System.Func`1"/> to invoke.</param>
            <param name="priority">The priority level for the function to invoke.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that acts as a proxy for the one returned by <paramref name="function"/>.</returns>
            <remarks>If the current thread has access to <paramref name="dispatcher"/>, <paramref name="function"/> will be invoked directly.</remarks>
        </member>
        <member name="M:Microsoft.UI.Dispatching.DispatcherQueueExtensions.EnqueueAsync``1(Microsoft.UI.Dispatching.DispatcherQueue,System.Func{System.Threading.Tasks.Task{``0}},Microsoft.UI.Dispatching.DispatcherQueuePriority)">
            <summary>
            Invokes a given function on the target <see cref="T:Microsoft.UI.Dispatching.DispatcherQueue"/> and returns a
            <see cref="T:System.Threading.Tasks.Task`1"/> that acts as a proxy for the one returned by the given function.
            </summary>
            <typeparam name="T">The return type of <paramref name="function"/> to relay through the returned <see cref="T:System.Threading.Tasks.Task`1"/>.</typeparam>
            <param name="dispatcher">The target <see cref="T:Microsoft.UI.Dispatching.DispatcherQueue"/> to invoke the code on.</param>
            <param name="function">The <see cref="T:System.Func`1"/> to invoke.</param>
            <param name="priority">The priority level for the function to invoke.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that relays the one returned by <paramref name="function"/>.</returns>
            <remarks>If the current thread has access to <paramref name="dispatcher"/>, <paramref name="function"/> will be invoked directly.</remarks>
        </member>
        <member name="M:Microsoft.UI.Dispatching.DispatcherQueueExtensions.GetEnqueueException(System.String)">
            <summary>
            Creates an <see cref="T:System.InvalidOperationException"/> to return when an enqueue operation fails.
            </summary>
            <param name="message">The message of the exception.</param>
            <returns>An <see cref="T:System.InvalidOperationException"/> with a specified message.</returns>
        </member>
        <member name="T:Microsoft.UI.Xaml.Media.Animation.StoryboardExtensions">
            <summary>
            Extension methods for classes in the Windows.UI.Xaml.Media.Animation namespace.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Media.Animation.StoryboardExtensions.Run(Microsoft.UI.Xaml.Media.Animation.Storyboard)">
            <summary>
            Begins a Storyboard and await for its completion
            </summary>
            <param name="storyboard">The storyboard</param>
        </member>
        <member name="T:Chinook.StackNavigation.FrameStackNavigator">
            <summary>
            This implementation of <see cref="T:Chinook.StackNavigation.IStackNavigator"/> uses a <see cref="T:Microsoft.UI.Xaml.Controls.Frame"/> to manage the navigation.
            </summary>
        </member>
        <member name="M:Chinook.StackNavigation.FrameStackNavigator.#ctor(Microsoft.UI.Xaml.Controls.Frame,System.Collections.Generic.IReadOnlyDictionary{System.Type,System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:Chinook.StackNavigation.FrameStackNavigator"/> class.
            </summary>
            <param name="frame">The frame.</param>
            <param name="registrations">The type registrations mapping ViewModel types to View types.</param>
        </member>
        <member name="M:Chinook.StackNavigation.FrameStackNavigator.GetLogger">
            <inheritdoc/>
        </member>
        <member name="M:Chinook.StackNavigation.FrameStackNavigator.HandleFrameInitiatedBackNavigations">
            <summary>
            Calls <see cref="M:Chinook.StackNavigation.IStackNavigator.NavigateBack(System.Threading.CancellationToken)"/> when the frame initiates a back navigation on its own.
            </summary>
            <remarks>
            This can happen when the user swipes to go back on iOS.
            </remarks>
        </member>
        <member name="M:Chinook.StackNavigation.FrameStackNavigator.InnerClear">
            <inheritdoc/>
        </member>
        <member name="M:Chinook.StackNavigation.FrameStackNavigator.InnerRemoveEntries(System.Collections.Generic.IEnumerable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:Chinook.StackNavigation.FrameStackNavigator.InnerNavigateAndGetView(Chinook.StackNavigation.INavigableViewModel)">
            <inheritdoc/>
        </member>
        <member name="M:Chinook.StackNavigation.FrameStackNavigator.InnerNavigateBack(Chinook.StackNavigation.NavigationStackEntry,Chinook.StackNavigation.NavigationStackEntry)">
            <inheritdoc/>
        </member>
    </members>
</doc>
